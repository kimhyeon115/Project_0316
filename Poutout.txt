디자인 패턴을 활용하면 단지 코드만 ‘재사용’하는 것이 아니라, 더 큰 그림을 
그리기 위한 디자인도 재사용할 수 있습니다. 우리가 일상적으로 접하는 문제 중 상당수는 
다른 많은 이들이 접했던 문제입니다.
디자인 패턴은 프로그램을 개발하는 과정에서 빈번하게 발생하는 디자인 문제를 정리해서 
상황에 따라 간편하게 적용할 수 있게 정리한 것입니다. 잘 활용할 수만 있다면 적지 않은
 시간과 노력, 시행착오를 줄일 수 있습니다.
우리 앞에 놓여진 것과 비슷한 문제를 해결하려고 선배들이 시간과 노력을 투자해서 
이것저것 시도해 보고, 그중에서 가장 효과적이라고 알려진 방법이 ‘패턴’이라는 
이름으로 자리를 잡았기 때문입니다.

데코레이터 패턴이란
객체의 결합 을 통해 기능을 동적으로 유연하게 확장 할 수 있게 해주는 패턴
즉, 기본 기능에 추가할 수 있는 기능의 종류가 많은 경우에 각 추가 기능을 
Decorator 클래스로 정의 한 후 필요한 Decorator 객체를 조합함으로써 추가 
기능의 조합을 설계 하는 방식이다.
Ex) 기본 도로 표시 기능에 차선 표시, 교통량 표시, 교차로 표시, 
단속 카메라 표시의 4가지 추가 기능이 있을 때 추가 기능의 모든 조합은 15가지가 된다.
-> 데코레이터 패턴을 이용하여 필요 추가 기능의 조합을 동적으로 생성할 수 있다.

이런 것을 보조 스트림이라고 한다.

- 원래 스트림은 바이트 단위로 핸들하는 것을 기본으로 함.
문자도 내부적으로 바이트 단위로 되어 있으며, 프로그램에서 문자를 사용할 때는 적절한 문자 인코딩으로 변환해서 사용해야함.
이러한 불편을 해소하기 위해서 스트림 차원에서 문자를 처리해 주는 문자 스트림을 제공. 스트림을 바이트로 핸들하느냐 문자로 핸들하느냐에 따라서 두 가지 종류로 나눌 수 있음.
- 바이트와 문자에 대한 스트림의 종류
-> 바이트 스트림 : 바이트 단위
-> 문자 스트림 : 문자 단위
- 바이트 스트림
-> 바이트 스트림은 데이터를 바이트 단위로 주고 받는 것을 말함.
대표적인 바이트 스트림은 InputStream과 OutputStream임. 그렇다면 InputStream과 OutputStrea을 통과하는 단위는 당연히 바이트. 8bit의 이진 비트를 묶으면 바이트가 됨. 바로 그 바이트. 원래 데이터는 모두 바이트임.
알고 보면 그림도 바이트들로 이루어져 있고, 텍스트도 바이트로 이루어져 있음. 그리고 zip이나 jar같은 압축 파일도 일단은 바이트로 되어있음. 이 바이트들이 적절하게 변환되면 의미있는 데이터가 되는 것.
 바이트 스트림의 경우에는 원시 바이트를 그대로 주고 받겠다는 의미를 담고 있음.
- 문자 스트림
-> 문자 스트림은 이러한 바이트들을 2바이트씩 묶어서 사용할 수도 있고, 1바이트 단위로 사용할 수 있음.
그것은 문자 인코딩에 따라서 다르게 사용되어짐. 자바에서 사용하는 문자방식으로 유니코드(Unicode)방식임.
 그래서 바이트로 전송되어지는 것을 스트림에서 재해석한 후 유니코드 문자로 변환하게 됨.
결과적으로 바이트를 문자로 가공을 하는 것이며, 문자의 인코딩은 문자 스트림에서 자동으로 해석하게 됨.